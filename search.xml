<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Git命令总结</title>
      <link href="/zh-Hans/Git/Git%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93-03-31/"/>
      <url>/zh-Hans/Git/Git%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93-03-31/</url>
      <content type="html"><![CDATA[<h2 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h2><blockquote><p>git config</p></blockquote><blockquote><p>git add</p></blockquote><blockquote><p>git commit </p></blockquote><blockquote><p>git status</p></blockquote><blockquote><p>git clone</p></blockquote><blockquote><p>git pull</p></blockquote><blockquote><p>git push</p></blockquote><blockquote><p>git log</p></blockquote><blockquote><p>git tag</p></blockquote><blockquote><p>git checkout</p></blockquote><blockquote><p>git branch</p></blockquote><blockquote><p>git rm</p></blockquote><blockquote><p>git reset</p></blockquote><blockquote><p>git submodule</p></blockquote>]]></content>
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux命令总结</title>
      <link href="/zh-Hans/Linux/Linux%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93-03-31/"/>
      <url>/zh-Hans/Linux/Linux%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93-03-31/</url>
      <content type="html"><![CDATA[<h2 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h2><blockquote><p>clean</p></blockquote><blockquote><p>touch</p></blockquote><blockquote><p>mkdir</p></blockquote><blockquote><p>cd </p></blockquote><blockquote><p>rm [-r] [-d] [-f]</p></blockquote><blockquote><p>mv</p></blockquote><blockquote><p>ifconfig</p></blockquote><h2 id="Linux用过的命令"><a href="#Linux用过的命令" class="headerlink" title="Linux用过的命令"></a>Linux用过的命令</h2>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Windows10+Linux多系统</title>
      <link href="/zh-Hans/TOOL/Windows10-Linux%E5%8F%8C%E7%B3%BB%E7%BB%9F-03-26/"/>
      <url>/zh-Hans/TOOL/Windows10-Linux%E5%8F%8C%E7%B3%BB%E7%BB%9F-03-26/</url>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> TOOL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UEFI </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>编辑器之神VIM</title>
      <link href="/zh-Hans/TOOL/VIM%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E7%A5%9E-03-24/"/>
      <url>/zh-Hans/TOOL/VIM%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E7%A5%9E-03-24/</url>
      <content type="html"><![CDATA[<h3 id="简介vim"><a href="#简介vim" class="headerlink" title="简介vim"></a>简介vim</h3><p>首先引入维基百科对<a href="https://zh.wikipedia.org/wiki/Vim" target="_blank" rel="noopener">vim</a>的概述</p><blockquote><p>Vim是从vi发展出来的一个文本编辑器。其代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。和Emacs并列成为类Unix系统用户最喜欢的编辑器。</p></blockquote><p>从vi派生出来的Vim具有多种模式，这种独特的设计容易使初学者产生混淆。几乎所有的编辑器都会有插入和执行命令两种模式，并且大多数的编辑器使用了与Vim截然不同的方式：命令目录（鼠标或者键盘驱动），组合键（通常通过control键<code>CTRL</code>和alt键<code>ALT</code>组成）或者鼠标输入。Vim和vi一样，仅仅通过键盘来在这些模式之中切换。这就使得Vim可以不用进行菜单或者鼠标操作，并且最小化组合键的操作。对文字录入员或者程序员可以大大增强速度和效率。</p><p>Vim具有6种基本模式和5种派生模式。</p><h4 id="基本模式"><a href="#基本模式" class="headerlink" title="基本模式"></a>基本模式</h4><h5 id="普通模式"><a href="#普通模式" class="headerlink" title="普通模式"></a>普通模式</h5><p>普通模式是vim启动后进入的默认模式，用的是编辑器命令，比如<code>h</code> <code>j</code> <code>k</code> <code>l</code>移动光标、<code>dd</code>剪切当前行、<code>x</code>删除当前字符、<code>X</code>删除当前字符的前一个字符等等，这也是vim强大的编辑能力的来源，在编辑文本的时候，不需要鼠标、手不离开键盘即可完成诸多复杂的编辑命令。<code>i</code> <code>a</code> <code>s</code>不同效果进入插入模式，<code>v</code> <code>V</code> <code>C-v</code>不同效果进入可视模式，<code>:</code> <code>/</code> <code>?</code> <code>!</code>不同效果进入命令行模式，在其他基本模式下，一般按<code>ESC</code>或者按两次<code>ESC</code>（可视模式）即可返回普通模式下。</p><h5 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a>插入模式</h5><p>插入模式是我们最常见的、小白们最希望见到的模式，在这个模式下，大多数按键都会向文本缓冲区中插入文本。</p><h5 id="可视模式"><a href="#可视模式" class="headerlink" title="可视模式"></a>可视模式</h5><h5 id="选择模式"><a href="#选择模式" class="headerlink" title="选择模式"></a>选择模式</h5><h5 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h5><h5 id="Ex模式"><a href="#Ex模式" class="headerlink" title="Ex模式"></a>Ex模式</h5><h4 id="派生模式"><a href="#派生模式" class="headerlink" title="派生模式"></a>派生模式</h4><h5 id="操作符等待模式"><a href="#操作符等待模式" class="headerlink" title="操作符等待模式"></a>操作符等待模式</h5><h5 id="插入普通模式"><a href="#插入普通模式" class="headerlink" title="插入普通模式"></a>插入普通模式</h5><h5 id="插入可视模式"><a href="#插入可视模式" class="headerlink" title="插入可视模式"></a>插入可视模式</h5><h5 id="插入选择模式"><a href="#插入选择模式" class="headerlink" title="插入选择模式"></a>插入选择模式</h5><h5 id="替换模式"><a href="#替换模式" class="headerlink" title="替换模式"></a>替换模式</h5><h3 id="安装vim"><a href="#安装vim" class="headerlink" title="安装vim"></a>安装vim</h3><p>vim是一个跨平台的文本编辑器，它可以在Windows、Mac、Unix和类Unix系统下编辑文本。</p><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>Ubuntu系统，可以使用下面的命令行下载安装</p><blockquote><p>sudo apt install vim</p></blockquote><p>Fedora系统，可以使用下面的命令行下载安装</p><blockquote><p>sudo dnf install vim</p></blockquote><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>Windows下有64位与32位之分，可以根据自己电脑的CPU和系统按需下载，下载包也有二进制文件与压缩包的区别，可以依据不同的网络条件进行下载。</p><p>二进制文件<br><a href="ftp://ftp.vim.org/pub/vim/pc/gvim80-586.exe" target="_blank" rel="noopener">64位下载</a><br><a href="https://github.com/vim/vim-win32-installer/releases" target="_blank" rel="noopener">32位下载</a></p><p><a href="ftp://ftp.vim.org/pub/vim/pc/gvim80-586.zip" target="_blank" rel="noopener">压缩包下载</a></p><p><a href="https://www.vim.org/" target="_blank" rel="noopener">vim官网</a></p><h3 id="调试vim"><a href="#调试vim" class="headerlink" title="调试vim"></a>调试vim</h3><p>一般进入命令后的默认路径是当前用户的个人文件夹下，这便是vim以及其他软件（Git、nodejs）个人设置的默认路径，如若不是，可以执行下面命令进入当前用户的个人文件夹下</p><blockquote><p>$ cd ~/</p></blockquote><p>在Linux下，此目录下会在vim安装后自动生成 .viminfo 文件，然而我们需要 .vimrc 文件来满足不同人的不同需求的个性化设置，很简单，我们只需执行下面的命令就可以创建这样的文件</p><blockquote><p>$ touch .vimrc</p></blockquote><p>在 .vimrc 中，我们就可以“为所欲为”地实现我们的想要，我的个人设置主要参考了vim插件管理工具（其实也是vim的一个插件）(vim-plug 在GitHub上的示例)[<a href="https://github.com/junegunn/vim-plug/blob/master/README.md]与网上其他人的设置，以下便是我的vim个人设置" target="_blank" rel="noopener">https://github.com/junegunn/vim-plug/blob/master/README.md]与网上其他人的设置，以下便是我的vim个人设置</a></p><blockquote></blockquote><p>说了这么久，忘记介绍最核心的vim设置了，它便是vim插件管理工具(vim-plug)[<a href="https://github.com/junegunn/vim-plug]，" target="_blank" rel="noopener">https://github.com/junegunn/vim-plug]，</a></p><p>虽然plug项目指导<strong>Unix</strong>可以使用下面的命令下载</p><blockquote><p>$ curl -fLo ~/.vim/autoload/plug.vim –create-dirs <a href="https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim" target="_blank" rel="noopener">https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</a></p></blockquote><p>可是我作为一名Linux新晋用户，在国内如此环境下（需搭梯子），我被curl的使用的代理协议socks4搞得很懵，只能另辟蹊径。</p><p>我们可以用<code>git clone https://github.com/junegunn/vim-plug.git ~/.vim/autoload</code>或者<code>git clone git@github.com:junegunn/vim-plug.git ~/.vim/autoload</code>下载，亦可以先用默认文件名下载到 ~/.vim/ 文件夹下，再将plug.vim文件复制到autoload文件夹下，虽然我不明白作者为什么要用autoload文件夹作为plug的根目录，但我还是用愚蠢的办法（git clone）先将vim-plug整个项目下载，再将plug.vim这个文件复制到autoload文件夹下，估计是我的个人强迫症使然。</p><h3 id="调戏vim"><a href="#调戏vim" class="headerlink" title="调戏vim"></a>调戏vim</h3>]]></content>
      
      <categories>
          
          <category> TOOL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
            <tag> 文本编辑器 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
